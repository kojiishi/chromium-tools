#!/usr/bin/env node
//
// This tool generates a pivot table report from multiple runs of a program.
//
// Firt, add counters to the code. A counter is a line in stderr that starts
// with "++" prefix. E.g., the following line adds "Counter1" counter:
//
//   LOG(INFO) << "++Counter1";
//
// then run this tool:
//
//   % pivot-log -nt http://www.google.com
//
// The tool runs `content_shell` twice with different arguments, collects
// lines that start with "++" from stderr and generates a report like this:
//
//   Counter1: legacy=12 ng=15
//   Counter2: legacy=15 ng=15
//
// A sample log code at:
// https://chromium-review.googlesource.com/c/chromium/src/+/1455836
//
const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

class ChildProcess {
  constructor(command, args) {
    this.command = command;
    this.args = args;
    this.options = {
      stdio: ['inherit', 'ignore', 'pipe'],
      shell: false,
    };
  }

  get commandLine() {
    return [this.command, ...this.args]
        .map(arg => arg.includes(' ') ? "'" + arg + "'" : arg)
        .join(' ');
  }

  async run() {
    return new Promise((resolve, reject) => {
      const p = child_process.spawn(this.command, this.args, {
        stdio: ['inherit', this.stdout ? 'pipe' : 'inherit', this.stderr ? 'pipe' : 'inherit'],
        shell: false,
      });
      if (this.stdout)
        p.stdout.pipe(fs.createWriteStream(this.stdout));
      if (this.stderr)
        p.stderr.pipe(fs.createWriteStream(this.stderr));
      p.on('close', (code) => {
        resolve();
      });
    });
  }
};

class PivotLog {
  async run() {
    let args = process.argv.slice(2);
    const minimist = require('minimist');
    this.options = minimist(args, {
      boolean: ['all', 'ng', 'test', 'verbose'],
      alias: {
        a: 'all',
        n: 'ng',
        t: 'test',
        v: 'verbose',
      },
    });
    args = this.options._;
    this.verbose = this.options.verbose ? console.log.bind(console) : () => {};

    if (this.options.ng) {
      this.compare(args);
      return;
    }

    await this.pivot(args);
  }

  async compare(args) {
    let command = path.join(process.env.OUT, 'content_shell');
    let command_args0 = [];
    if (this.options.test)
      command_args0.push('--run-web-tests');
    let command_args = {
      legacy: command_args0,
      ng: [...command_args0, '--enable-blink-features=LayoutNG'],
    };

    for (let arg of args) {
      let processes = Object.entries(command_args)
          .map((entry) => this.collect(arg, entry[0], command, [...entry[1], arg]));
      let logs;
      if (this.options.test) {
        logs = await Promise.all(processes);
      } else {
        logs = [];
        for (let p of processes)
          logs.push(await p);
      }
      await this.pivot(logs, arg);
    }
  }

  async collect(test, config, command, args) {
    let p = new ChildProcess(command, args);
    p.stdout = config + '-stdout.log';
    p.stderr = config + '.log';
    this.verbose(p.commandLine);
    await p.run();
    return p.stderr;
  }

  // Parse a log file and return a dictionary of key-value pairs.
  async parse(file) {
    let content = fs.readFileSync(file === '-' ? process.stdin.fd : file, 'utf8');
    let re_inc = new RegExp(/^\[[^]*] \+\+(\S+)/);
    let re_assign = new RegExp(/^\[[^]*] ([a-zA-Z][a-zA-Z0-9_.]*)=(\d+)$/);
    let kv = {};
    for (let line of content.split(/\r?\n/)) {
      let match = re_inc.exec(line);
      if (match) {
        let key = match[1];
        let value = kv[key];
        kv[key] = value ? value + 1 : 1;
        continue;
      }
      match = re_assign.exec(line);
      if (match) {
        let key = match[1];
        let value = parseInt(match[2]);
        let current = kv[key];
        if (current === undefined) {
          kv[key] = [value];
        } else {
          current.push(value);
        }
      }
    }
    return kv;
  }

  async pivot(logfiles, testname) {
    let kfv_dict = {};
    for (let logfile of logfiles) {
      let kv = await this.parse(logfile);
      for (let key in kv) {
        let fv = kfv_dict[key];
        if (!fv) {
          kfv_dict[key] = fv = [];
        }
        fv.push({name:logfile, value:kv[key]});
      }
    }

    let kfv_list = Object.entries(kfv_dict);
    if (!kfv_list.length) {
      this.verbose(`${testname}: no counters collected`);
      return;
    }
    if (!this.options.all && logfiles.length > 1) {
      kfv_list = kfv_list.filter(kfv => {
        let fv_list = kfv[1];
        if (fv_list.length !== logfiles.length)
          return true;
        let value = fv_list[0].value;
        for (let i = 1; i < fv_list.length; i++) {
          if (fv_list[i].value !== value)
            return true;
        }
        return false;
      });
      if (!kfv_list.length) {
        this.verbose(`${testname}: no differences`);
        return;
      }
    }
    kfv_list = kfv_list.sort((a, b) => { return a[0] === b[0] ? 0 : (a[0] < b[0] ? -1 : 1); });
    if (testname)
      console.log(testname);
    for (let kfv of kfv_list) {
      let key = kfv[0];
      let fv_list = kfv[1];
      console.log(`  ${key}: ${fv_list.map(fv => {
        let name = fv.name.replace(/\.log$/, '');
        let value = fv.value;
        if (Array.isArray(value))
          value = `[${value.length}]{${value.join(',')}}`;
        return `${name}=${value}`;
      }).join(' ')}`);
    }
  }
};

(new PivotLog()).run();
