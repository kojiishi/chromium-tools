#!/usr/bin/env node
//
// This tool generates a pivot table report from multiple runs of a program.
//
// Firt, add counters with "++" prefix; e.g.:
//
//   LOG(INFO) << "++Counter1";
//
// then run this tool:
//
//   % pivot-log http://www.google.com
//
// The tool runs `content_shell` twice with different arguments, collects
// lines that start with "++" from stderr and creates and generates report
// like this:
//
//   Counter1: legacy=12 ng=15
//   Counter2: legacy=15 ng=15
//
// A sample log code at:
// https://chromium-review.googlesource.com/c/chromium/src/+/1455836
//
const child_process = require('child_process');
const fs = require('fs');
const path = require('path');

class PivotLog {
  async run() {
    let args = process.argv.slice(2);
    const minimist = require('minimist');
    const options = minimist(args, {
      boolean: ['log'],
      alias: {
        l: 'log',
      },
    });
    args = options._;

    if (options.log) {
      await this.pivot_logs(args);
      return;
    }

    this.command = path.join(process.env.OUT, 'content_shell');
    this.command_args = {
      legacy: ['--run-web-tests'],
      ng: ['--run-web-tests', '--enable-blink-features=LayoutNG'],
    };

    for (let arg of args) {
      console.log(arg);
      let processes = Object.entries(this.command_args)
        .map(entry => this.run_target(entry[0], [...entry[1], arg]));
      let logs = await Promise.all(processes);
      await this.pivot(logs);
    }
  }

  async run_target(name, args) {
    return new Promise((resolve, reject) => {
      let logpath = name + '.log';
      const p = child_process.spawn(this.command, args, {
        stdio: ['inherit', 'ignore', 'pipe'],
        // shell: true,
      });
      const log = fs.createWriteStream(logpath);
      p.stderr.pipe(log);
      p.on('close', (code) => {
        resolve(logpath);
      });
    });
  }

  async parse(file) {
    let content = fs.readFileSync(file, 'utf8');
    let re_inc = new RegExp(/^\[[^]*] \+\+(\S+)/);
    let re_assign = new RegExp(/^\[[^]*] ([^ ][^=]*)=(\d+)$/);
    let kv = {};
    for (let line of content.split(/\r?\n/)) {
      let match = re_inc.exec(line);
      if (match) {
        let key = match[1];
        let value = kv[key];
        kv[key] = value ? value + 1 : 1;
        continue;
      }
      match = re_assign.exec(line);
      if (match) {
        kv[match[1]] = parseInt(match[2]);
      }
    }
    return kv;
  }

  async pivot(logfiles) {
    let kfv = {};
    for (let logfile of logfiles) {
      let kv = await this.parse(logfile);
      for (let key in kv) {
        let fv = kfv[key];
        if (!fv) {
          kfv[key] = fv = {};
        }
        fv[logfile] = kv[key];
      }
    }

    for (let key of Object.keys(kfv).sort()) {
      let fv = kfv[key];
      console.log(`${key}: ${Object.entries(fv)
          .map(fv => {
            let logname = fv[0].replace(/\.log$/, '');
            return `${logname}=${fv[1]}`;
          }).join(' ')}`);
    }
  }
};

(new PivotLog()).run();
