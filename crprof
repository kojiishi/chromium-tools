#!/usr/bin/env node
//
// Profile Chromium renderer.
//
'use strict';
const child_process = require('child_process');
const fs = require('fs-extra');

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function findProcessId(re) {
  while (true) {
    let ps = child_process.execSync('ps -aux').toString().split('\n');
    for (let line of ps) {
      if (line.match(re))
        return parseInt(line.split(/ +/)[1]);
    }
    await sleep(1000);
  }
}

class ChildProcess {
  constructor(command, args) {
    this.stderrEvents = [];
    let child = child_process.spawn(command, args, {
      stdio: [process.stdin, process.stdout, 'pipe'],
    });
    child.stderr.on('data', (data) => this.fireStderr(data));
    // child.on('close', (code) => this.fireClose(code));
  }

  fireStderr(data) {
    process.stderr.write(data);
    data = data.toString();
    for (let e of this.stderrEvents) {
      if (data.includes(e[0])) {
        e[1](data);
      }
    }
  }

  stderrHas(message) {
    return new Promise((resolve, reject) => {
      this.stderrEvents.push([message, resolve, reject]);
    });
  }
}

class Profiler {
  async run() {
    let args = process.argv.slice(2);
    let target = new ChildProcess('d', ['r', '++renderer-startup-dialog'].concat(args));
    let message = await target.stderrHas('paused waiting for debugger to attach. Send SIGUSR1 to unpause.');
    let pid = await findProcessId(/content_shell.*type=renderer/);

    console.log('### PID = ' + pid);
    const perfdata = 'perf.data';
    let perf = new ChildProcess('perf', ['record', '-g', '-F', '1000', '-p', pid, '-o', perfdata]);
    process.kill(pid, 'SIGUSR1');
    let done = await perf.stderrHas('[ perf record: Captured and wrote ');

    console.log('### PROCESS EXIT, generating profile: ' + done);
    child_process.execSync(`(set -x; pprof -svg $OUT/content_shell ${perfdata})`, {stdio: 'inherit'});
    await fs.unlink(perfdata);
  }
}

new Profiler().run();
