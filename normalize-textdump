#!/usr/bin/env node
'use strict';
/*
HOW TO USE:
1. Download layout-test-results.zip and unzip.
2. % normalize-textdump layout-test-results/full_results.json
*/
'use strict';
const assert = require('assert');
const fs = require('fs-extra');
const path = require('path');
const TestResults = require('./update-expectations').TestResults;
let log = console.error.bind(console);

class Box {
  static parse(line) {
    let match = line.match(/^( *)(\w+) (\S+) at \((\d+),(\d+)\) size (\d+)x(\d+)(\s.*)?$/);
    if (!match)
      return null;
    let box = new Box;
    box.leading = match[1];
    box.name = match[2];
    box.tag = match[3];
    box.x = match[4];
    box.y = match[5];
    box.width = match[6];
    box.height = match[7];
    box.trailing = match[8];
    return box;
  }

  toString() {
    return [this.leading, this.name, ' ', this.tag, ' at (',
        this.x, ',', this.y, ') size ', this.width, 'x', this.height,
        this.trailing].join('');
  }
}

class TextRun {
  constructor() {
    this.lines_ = [];
  }

  static parse(line) {
    let match = line.match(/^( *)text run at \((\d+),(\d+)\) width (\d+): "(.*)"\s*$/);
    if (!match)
      return null;
    let textRun = new TextRun;
    textRun.leading = match[1];
    textRun.x = parseFloat(match[2]);
    textRun.y = match[3];
    textRun.xEnd = textRun.x + parseFloat(match[4]);
    textRun.text = match[5];
    return textRun;
  }

  add(textRun) {
    if (textRun.y === this.y) {
      this.xEnd = textRun.xEnd;
      this.text += textRun.text;
      return;
    }
    if (this.y !== undefined)
      this.addLine();
    this.x = textRun.x;
    this.xEnd = textRun.xEnd;
    this.y = textRun.y;
    this.text = textRun.text;
    this.leading = textRun.leading;
  }

  toString() {
    let width = '###';
    return `${this.leading}text run at (${this.x},${this.y}) width ${width}: "${this.text.trimRight()}"`;
  }

  addLine() {
    this.lines_.push(this.toString());
    this.y = undefined;
  }

  get lines() {
    if (this.y !== undefined)
      this.addLine();
    return this.lines_;
  }
}

class TextDump {
  constructor(content) {
    this.content = content;
  }

  static async load(filePath) {
    if (!fs.existsSync(filePath))
      return null;
    let content = await fs.readFile(filePath, 'utf8');
    return new TextDump(content);
  }

  async write(filePath) {
    await fs.outputFile(filePath, this.content, 'utf8');
  }

  normalize() {
    let lines = [];
    let currentTextRun = null;
    for (let line of this.content.trimRight().split(/\r?\n/)) {
      let textRun = TextRun.parse(line);
      if (textRun) {
        if (!currentTextRun)
          currentTextRun = textRun;
        else
          currentTextRun.add(textRun);
        this.hasTextDump = true;
        continue;
      }
      if (currentTextRun) {
        Array.prototype.push.apply(lines, currentTextRun.lines);
        currentTextRun = null;
      }
      let box = Box.parse(line);
      if (box) {
        if (box.name === 'LayoutText') {
          box.width = '###';
        } else if (box.name === 'LayoutBR') {
          box.x = box.y = box.width = box.height = '###';
        }
        line = box.toString();
        this.hasTextDump = true;
      }
      line = line.replace('LayoutNG', 'Layout');
      lines.push(line);
    }
    if (currentTextRun)
      Array.prototype.push.apply(lines, currentTextRun.lines);
    this.content = lines.join('\n') + '\n';
  }

  static async run(jsonPath) {
    log(`Loading ${jsonPath}`);
    const platforms = ['linux', 'win'];
    let results = await TestResults.load(jsonPath);
    let resultsDir = path.dirname(jsonPath);
    let expectedOutDir = path.join(resultsDir, '..', 'expected');
    let actualOutDir = path.join(resultsDir, '..', 'actual');
    let textFailures = 0;
    let generated = 0;
    let failures = [];
    for (let result of results) {
      if (!result.actuals.is('TEXT'))
        continue;
      textFailures++;

      // Load -expected.txt text dump.
      let testPath = path.parse(result.path);
      let expectedPath = path.format({
          dir: testPath.dir,
          name: testPath.name + '-expected',
          ext: '.txt'});
      let expected = await TextDump.load(path.join(resultsDir, expectedPath));
      if (!expected)
        continue;

      // Check if -expected.png exists.
      // If it does, it means images match.
      let expectedImage = path.format({
          dir: testPath.dir,
          name: testPath.name + '-expected',
          ext: '.png'});
      expectedImage = results.baseline(expectedImage, platforms);

      // Load -actual.txt text dump.
      let actualPath = path.format({
        dir: testPath.dir,
        name: testPath.name + '-actual',
        ext: '.txt'});
      let actual = await TextDump.load(path.join(resultsDir, actualPath));
      assert(actual);
      assert(actual.content !== expected.content);

      // Normalize both expected and actual, and compare them.
      expected.normalize();
      actual.normalize();

      let failure = {
        path: result.path,
        hasImage: expectedImage,
        hasTextDump: expected.hasTextDump,
        matches: expected.content === actual.content,
      };
      if (failure.hasTextDump) {
        await expected.write(path.join(expectedOutDir, expectedPath));
        await actual.write(path.join(actualOutDir, expectedPath));
      }
      failures.push(failure);
    }

    log(`From ${failures.length} text dumps among ${textFailures} text failures.`);
    function output(title, list, showList = true) {
      console.log(`## ${title} (${list.length})`);
      if (showList) {
        for (let item of list)
          console.log(item.path);
      }
    }
    output('Has image and text dump match', failures.filter(d => d.hasImage && d.hasTextDump && d.matches));
    output('Has image and non-text dump match', failures.filter(d => d.hasImage && !d.hasTextDump && d.matches));
    output('Has image but text dump did not match', failures.filter(d => d.hasImage && d.hasTextDump && !d.matches));
    output('Has image but non-text dump did not match', failures.filter(d => d.hasImage && !d.hasTextDump && !d.matches));
    output('No image but text dump match', failures.filter(d => !d.hasImage && d.hasTextDump && d.matches));
    output('No image but non-text dump match', failures.filter(d => !d.hasImage && !d.hasTextDump && d.matches));
    output('No image and text dump did not match', failures.filter(d => !d.hasImage && d.hasTextDump && !d.matches));
    output('No image, non-text dump did not match', failures.filter(d => !d.hasImage && !d.hasTextDump && !d.matches), false);
  }
}

TextDump.run(process.argv[2]).catch(err => {
  console.error(err);
  process.exit(1);
});
