#!/usr/bin/env node
'use strict';
const assert = require('assert');
const child_process = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const rp = require('request-promise-native');

let log = () => {};
const statistics = {
  LinesChanged: 0,
  LinesAdded: 0,
  LinesRemoved: 0,
};
let async_tasks = [];
let options;

class Options {
  constructor() {
  }

  static parseArgs(args) {
    const minimist = require('minimist');
    args = args || process.argv.slice(2);
    const options = minimist(args, {
      boolean: ['deflake', 'no-commit', 'remove', 'sort', 'verbose'],
      string: ['bug', 'expects', 'file', 'flag', 'path', 'rebaseline'],
      alias: {
        b: 'bug',
        d: 'deflake',
        e: 'expects',
        f: 'file',
        n: 'no-commit',
        p: 'path',
        r: 'rebaseline',
        s: 'sort',
        v: 'verbose',
      },
      default: {
        expects: '*',
      },
      unknown: arg => {
        if (arg.startsWith('-')) {
          throw new Error(`Unknown option ${arg}
Usage: ${path.basename(__filename)} [options] [results.json...]
  -b <bug>: The bug number/string for new entries.
  -d: De-flake if all results are pass.
  -e <expect,expect,...>: Update specified expects only.
     If the expect starts with '-', it is ignored instead.
  -f <file>: The TestExpectations file path.
  -p <string>: Only include tests with the specified path.
     If the path starts with '-', it is excluded instead.
  -r <test paths>: Rebaseline specified tests instead of adding to expectations.
     Test paths is space or newline delimited string.
     When it's '-', it's read from stdin.
     When it's 'spaces', space-only failures will be rebaselined.
  --remove: Remove entries where test files are missing in the local file system.
  -s: Sort the output.
  -v: Verbose.
  results.json: The build number, or the path of results.json.
                If it is 'local', the last result of local runs is used.
                If it is 'try-results', it is taken from 'git cl try-results'.
`);
        }
        return true;
      },
    });
    options.__proto__ = new Options;
    options.onChanged();
    return options;
  }

  onChanged() {
    if (this.verbose)
      log = console.log.bind(console);
    log.files = [];
    log.warnings = [];
    log.warn = msg => {
      log(msg);
      log.warnings.push(msg);
    };
    if (this.bug && this.bug.match(/^\d/))
      this.bug = 'crbug.com/' + this.bug;
    this.expects = (args => {
      if (!args.length)
        return {};
      if (args[0][0] === '-')
        args = ['*'].concat(args);
      let expects = {};
      for (let arg of args) {
        if (arg === '*') {
          for (let e of ['Pass', 'Failure', 'Crash', 'Timeout'])
            expects[e] = 0;
        } else if (arg[0] === '-') {
          delete expects[arg.slice(1)];
        } else {
          expects[arg] = 0;
        }
      }
      return expects;
    })(Options.argAsArray(this.expects));
    this.shouldUpdate = (args => {
      if (!args.length)
        return () => true;
      return testPath => {
        let whenNotFound = true;
        for (let arg of args) {
          if (arg.startsWith('-')) {
            if (testPath.includes(arg.slice(1)))
              return false;
          } else {
            if (testPath.includes(arg))
              return true;
            whenNotFound = false;
          }
        }
        return whenNotFound;
      };
    })(Options.argAsArray(this.path));
  }

  async updateFromOptionsAsync() {
    this.shouldRebaseline = (args => {
      if (!args.length)
        return null;
      if (args.length === 1 && args[0] === 'spaces') {
        return result => {
          if (result.actuals.is('TEXT')) {
            switch (result.textMismatchCategory) {
              case 'spaces and tabs only':
              case 'newlines only':
              case 'spaces, tabs and newlines only':
                return true;
            }
          }
          return false;
        };
      }
      args = args.map(l => l.trim());
      let byPath = arrayToDict(args);
      return result => result.path in byPath;
    })(await Options.argAsArrayWithFile(this.rebaseline));
  }

  static argAsArray(arg) {
    if (!arg)
      return [];
    if (arg === '-')
      arg = fs.readFileSync('/dev/stdin').toString();
    if (!Array.isArray(arg))
      arg = arg.split(/[, \n]/).filter(p => p);
    return arg;
  }

  static async argAsArrayWithFile(arg) {
    if (arg === '-')
      return await Options.readLinesFromStdin();
    return Options.argAsArray(arg);
  }

  static readLinesFromStdin() {
    return new Promise((resolve, reject) => {
      const readline = require('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });
      const lines = [];
      rl.on('close', () => resolve(lines));
      rl.on('line', (line) => lines.push(line));
    });
  }

  testResultsUrl(build) {
    return `https://test-results.appspot.com/data/layout_results/linux_layout_tests_layout_ng/${build}/layout-test-results/full_results.json`;
  }

  get buildDir() {
    return process.env.CHROMIUM_OUTPUT_DIR;
  }

  get webKitDir() {
    let dir = process.env['WEBKIT'];
    if (dir)
      return dir;
    dir = process.env['CHROMIUM_SRC'];
    if (dir)
      return path.join(dir, 'third_party', 'WebKit');
    for (dir = path.resolve(this.hintDir || '.');;) {
      let d = path.join(dir, 'WebKit');
      if (fs.existsSync(d))
        return d;
      let parent = path.dirname(dir);
      if (parent === dir)
        break;
      dir = parent;
    }
    throw new Error('WebKit directory not found (set WEBKIT or CHROMIUM_SRC)');
  }

  get testRootDir() {
    return path.resolve(this.webKitDir, '../WebKit/LayoutTests');
  }

  *testExpectationsPaths() {
    if (this.flag)
      yield path.join(this.testRootDir, 'FlagExpectations', this.flag);
    yield path.join(this.testRootDir, 'TestExpectations');
    yield path.join(this.testRootDir, 'SlowTests');
    yield path.join(this.testRootDir, 'NeverFixTests');
  }

  *baselineDirs(platforms, flags) {
    if (flags) {
      if (!Array.isArray(flags))
        flags = [flags];
      let flagDir = 'flag-specific';
      for (let flag of flags)
        yield path.join(flagDir, flag);
    }
    if (platforms) {
      let platformDir = 'platform';
      for (let platform of platforms)
        yield path.join(platformDir, platform);
    }
    yield '';
  }

  addHintDir(dir) {
    this.hintDir = dir;
  }

  async checkPng(file) {
    let code = await new Promise((resolve, reject) => {
      let child = child_process.spawn('pngcheck', [file]);
      child.stdout.on('data', (data) => log(data.toString()));
      child.on('close', (code) => {
        resolve(code)
      });
    });
    return code === 0;
  }

  async download(url, dest) {
    log(`Downloading from ${url}`);
    let body;
    for (let retry = 0; ; retry++) {
      try {
        body = await rp(url, {encoding: null});
      } catch (error) {
        if (retry < 3 && error.statusCode && error.statusCode >= 500) {
          log.warn(`Retrying ${retry} from ${url}: ${error}`);
          await sleep(1000);
          continue;
        }
        throw error;
      }
      await fs.outputFile(dest, body);
      if (dest.endsWith('.png')) {
        let result = await this.checkPng(dest);
        if (!result) {
          if (retry < 3) {
            log.warn(`Retrying ${retry} from ${url}: Invalid PNG`);
            continue;
          }
          await fs.unlink(dest);
          throw new Error(`Invalid PNG ${url}`)
        }
      }
      break;
    }
    log(`Download completed from ${url}`);
  }
}

function arrayToDict(array, value = true) {
  let dict = {};
  for (let i of array)
    dict[i] = value;
  return dict;
}

function *filter(iterable, predicate) {
  for (let i of iterable) {
    if (predicate(i))
      yield i;
  }
}

function *map(iterable, func) {
  for (let i of iterable)
    yield func(i);
}

function any(iterable, predicate) {
  for (let i of iterable) {
    if (predicate(i))
      return true;
  }
  return false;
}

function isIterator(obj) {
  return typeof obj[Symbol.iterator] === 'function';
}

function sleep(ms){
  return new Promise(resolve => setTimeout(resolve, ms));
}

class StringList {
  constructor(items = []) {
    if (!Array.isArray(items)) {
      assert(typeof items === 'string' || items instanceof String);
      items = items.trim().split(/\s+/).filter(t => t);
    }
    assert(Array.isArray(items));
    this.items = items;
  }

  get length() { return this.items.length; }
  [Symbol.iterator]() { return this.items[Symbol.iterator](); }
  toArray() { return this.items; }
  toString() { return '[ ' + this.items.join(' ') + ' ]'; }

  is(item) {
    return this.items.length == 1 && this.items[0] == item;
  }

  has(item) {
    return this.items.includes(item);
  }

  isSubsetOf(other) {
    for (let item of this.items) {
      if (!other.has(item))
        return false;
    }
    return true;
  }

  push(item) {
    if (item instanceof StringList) {
      item = item.items;
    } else if (!Array.isArray(item)) {
      this.items.push(item);
      return;
    }
    Array.prototype.push.apply(this.items, item);
  }

  makeUnique() {
    this.items = Array.from(new Set(this.items));
  }
}

class TestResultTypes extends StringList {
  constructor(types = []) {
    super(types);
  }

  static toSeverity(type) {
    switch (type) {
      case 'CRASH':
      case 'Crash':
        return 6;
      case 'TIMEOUT':
      case 'Timeout':
        return 5;
      case 'IMAGE+TEXT':
        return 4;
      case 'IMAGE':
        return 3;
      case 'TEXT':
        return 2;
      case 'FAIL':
      case 'Failure':
        return 1;
      case 'MISSING':
      case 'PASS':
      case 'SKIP':
      case 'SLOW':
      case 'Missing':
      case 'Pass':
      case 'Skip':
        return 0;
      default:
        assert(false, `Unexpected type ${type} in ${this.toString()}`);
    }
  }

  get hasFailure() {
    return any(this.items.map(TestResultTypes.toSeverity),
               severity => severity);
  }

  get severestFailure() {
    let items = this.items
      .map(type => [TestResultTypes.toSeverity(type), type])
      .filter(r => r[0]);
    if (!items.length)
      return null;
    items.sort((a, b) => b[0] - a[0]);
    return items[0][1];
  }

  get shouldNotUpdate() {
    return this.items.length == 1 &&
        (this.items[0] == 'Skip' ||
         this.items[0] == 'NeedsRebaseline' ||
         this.items[0] == 'NeedsManualRebaseline');
  }

  static toExpectation(actual) {
    switch (actual) {
      case 'PASS':
        return 'Pass';
      case 'IMAGE':
      case 'TEXT':
      case 'IMAGE+TEXT':
        return 'Failure';
      case 'CRASH':
        return 'Crash';
      case 'TIMEOUT':
        return 'Timeout';
      case 'MISSING':
      case 'SKIP':
        return null;
      default:
        throw new Error(`Unknown actual ${actual}`);
    }
  }

  toExpectations() {
    return new TestResultTypes(this.items
        .map(TestResultTypes.toExpectation)
        .filter(expect => expect != null));
  }

  *failureExtensions() {
    for (let actual of this.items) {
      for (let type of actual.split('+')) {
        switch (type) {
          case 'IMAGE':
            yield '.png';
            break;
          case 'TEXT':
            yield '.txt';
            break;
          default:
            throw new Error(`Cannot rebaseline for '${actual}: ${this.path}`);
        }
      }
    }
  }

  deflake(actuals) {
    assert(actuals instanceof TestResultTypes && actuals.length);
    actuals = new Set(actuals.toExpectations().toArray());
    if (!actuals.size)
      return; // Cannot deflake without actual results.
    this.items = this.items.filter(e => actuals.has(e));
  }
}

class TestExpectation {
  constructor(bug, testPath, expectations = new TestResultTypes(), conditions, trailing) {
    this.bug = bug;
    this.path = testPath;
    if (!(expectations instanceof TestResultTypes))
      expectations = new TestResultTypes(expectations);
    this.expectations = expectations;
    this.conditions = conditions;
    this.trailing = trailing;
    this.isRemoved = false;
    this.actuals = null;
    this.shouldNotUpdate = this.expectations.shouldNotUpdate;
  }

  static parse(line) {
    if (line.expectations)
      return line;
    let match = line.match(/^(\S*)\s+(\[([^\]]+)]\s+)?(\S+)\s+\[([^\]]+)](.*)/);
    if (match) {
      return new TestExpectation(match[1], match[4], new TestResultTypes(match[5]), match[3], match[6]);
    }
    return null;
  }

  static isTestExpectation(obj) {
    return obj instanceof TestExpectation;
  }

  get filePath() {
    return this.path.replace(/^virtual\/[^/]*\//, '');
  }

  get shouldUpdate() {
    return !this.shouldNotUpdate && options.shouldUpdate(this.path);
  }

  conditionsHas(condition) {
    if (!this.conditions)
      return true;
    let conditions = this.conditions.split(' ');
    return conditions.includes(condition);
  }

  toString() {
    if (this.isRemoved)
      return null;
    let output = [ this.bug ? this.bug : '' ];
    if (this.conditions)
    output = output.concat('[', this.conditions.trim(), ']');
    output = output.concat(this.path, '[', this.expectations.toArray(), ']');
    return output.join(' ') + (this.trailing ? this.trailing : '');
  }

  shouldSkipWrite() {
    return this.isRemoved || !this.expectations.length;
  }

  remove() {
    assert(!this.isRemoved);
    this.isRemoved = true;
    statistics.LinesRemoved++;
  }

  addActuals(actuals) {
    assert(actuals instanceof TestResultTypes);
    if (!this.actuals)
      this.actuals = actuals;
    else
      this.actuals.push(actuals);
  }

  update() {
    if (this.shouldNotUpdate)
      return;
    let actuals = this.actuals;
    if (!actuals || !actuals.length)
      return;
    let addCount = 0;
    for (let expect of actuals.toExpectations()) {
      if (!(expect in statistics) || this.expectations.has(expect))
        continue;
      log(`  Adding ${expect} to ${this.path}`);
      this.expectations.push(expect);
      statistics[expect]++;
      addCount++;
    }
    if (addCount) {
      this.expectations.items.sort();
      statistics.LinesChanged++;
    }
  }

  deflake(testExpectations) {
    let actuals = this.actuals;
    if (!actuals || !actuals.length)
      return;
    let before = this.expectations.items;
    this.expectations.deflake(actuals);
    if (this.removeIfNeeded(testExpectations, before))
      return;
    let deflaked = this.expectations.items;
    if (before.length === deflaked.length)
      return;
    log(`  Deflaking from ${before} to ${deflaked}: ${this.path}`);
    statistics.LinesDeflaked = statistics.LinesDeflaked || 0;
    statistics.LinesDeflaked++;
  }

  removeIfNeeded(testExpectations, originalExpectations) {
    if (!this.expectations.length) {
      // Remove if no expectations.
    } else if (testExpectations && this.isSubsetOfParents(testExpectations)) {
      // Remove if this is a subset of parent expectations.
    } else {
      return false;
    }
    log(`  Removing ${this.path} ${originalExpectations || this.expectations} with ${this.actuals}`);
    this.remove();
    return true;
  }

  isSubsetOfParents(testExpectations) {
    let ancestorsExepctations = new TestResultTypes;
    for (let parent of testExpectations.parentTestExpectations(this.path)) {
      if (!parent.conditionsHas('Linux')) {
        continue;
      }
      // TODO: How are Release/Debug evaludated? For now, just take it safe.
      if (parent.conditionsHas('Release') || parent.conditionsHas('Debug')) {
        // log(`  Leave ${this.path} ${this.expectations} because parent is [${parent.conditions}] ${parent.expectations}`);
        return false;
      }
      let parentExpectations = parent.expectations;
      if (parentExpectations.is('Skip')) {
        log(`  Remove ${this.path} ${this.expectations} because parent is ${parentExpectations}`);
        return true;
      }
      ancestorsExepctations.push(parentExpectations);
    }
    if (ancestorsExepctations.length === 0) {
      if (this.expectations.is('Pass')) {
        log(`  Removing ${this.path} ${this.expectations} because no parents`);
        return true;
      }
      // log(`  Leave ${this.path} ${this.expectations} because no parents`);
      return false;
    }
    if (this.expectations.isSubsetOf(ancestorsExepctations)) {
      log(`  Removing ${this.path} ${this.expectations} because parent is ${ancestorsExepctations}`);
      return true;
    }
    log(`  Leave ${this.path} ${this.expectations} because parent is ${ancestorsExepctations}`);
    return false;
  }

  exists(testRoot) {
    return fs.existsSync(path.resolve(testRoot, this.filePath));
  }
}

class TestExpectations {
  constructor(files) {
    if (isIterator(files))
      files = Array.from(files);
    if (!Array.isArray(files))
      files = [files];
    this.path = files[0];
    this.parentPaths = files.slice(1);
    log(`Reading expectations file from ${this.path}`);
    let inputText = fs.readFileSync(this.path, 'utf8');
    this.parse(inputText);
  }

  parse(inputText) {
    let lines = inputText.trimRight().split(/\r?\n/)
    let tests = [];
    this.testsByPath = {};
    for (let line of lines) {
      let test = TestExpectation.parse(line);
      if (!test) {
        tests.push(line);
      } else {
        tests.push(test);
        this.onTestExpectationAdded(test);
      }
    }
    this.lines = tests;
  }

  onTestExpectationAdded(test) {
    let path = test.path;
    let list = this.testsByPath[path];
    if (list)
      list.push(test);
    else
      this.testsByPath[path] = [test];
  }

  write() {
    let lines = this.lines
      .filter(test =>
        !TestExpectation.isTestExpectation(test) ||
        !test.shouldSkipWrite());
    fs.writeFileSync(this.path, lines.join('\n') + '\n', 'utf8');
  }

  testExpectations(testPath) {
    if (testPath)
      return this.testsByPath[testPath];
    return this.lines.filter(test =>
      TestExpectation.isTestExpectation(test) && !test.isRemoved);
  }

  get parent() {
    if (this.parent_)
      return this.parent_;
    if (this.parentPaths.length)
      return this.parent_ = new TestExpectations(this.parentPaths);
    return null;
  }

  *parentTestExpectations(testPath) {
    for (let parent = this.parent; parent; parent = parent.parent) {
      let expectations = parent.testExpectations(testPath);
      if (expectations && expectations.length)
        yield* expectations;
    }
  }

  add(expectation) {
    assert(TestExpectation.isTestExpectation(expectation) && !expectation.isRemoved);
    this.lines.push(expectation);
    this.onTestExpectationAdded(expectation);
    statistics.LinesAdded++;
  }

  addActuals(results, addNew = false) {
    for (let result of results) {
      if (!result.shouldUpdate)
        continue;
      let expectations = this.testExpectations(result.path);
      let expectation;
      if (expectations && expectations.length) {
        // TODO: Should consider conditions to find the appropriate entry.
        // For now, we only update FlagExpectations, which has only one expectation
        // for a path.
        expectation = expectations[0];
      } else {
        if (!addNew)
          continue;
        expectation = new TestExpectation(options.bug, result.path);
        this.add(expectation);
      }
      expectation.addActuals(result.actuals);
    }
  }

  update() {
    log(`Updating expectations in ${this.path}...`);
    for (let expectation of this.testExpectations()) {
      if (expectation.shouldUpdate)
        expectation.update();
    }
  }

  deflake() {
    log(`De-flaking...`);
    for (let expectation of this.testExpectations()) {
      if (expectation.shouldUpdate)
        expectation.deflake(this);
    }
  }

  removeIfNotExists(testRootDir) {
    if (!testRootDir) {
      options.addHintDir(this.path);
      testRootDir = options.testRootDir;
    }
    log(`Checking non-existent tests in ${testRootDir}`);
    return this.removeIf(test => {
      if (test.path && !test.exists(testRootDir)) {
        log(`  Removing non-existent test: ${test.path}`);
        statistics.LinesRemoved++;
        return true;
      }
      return false;
    });
  }

  sort() {
    let input = this.lines;
    let output = [];
    let comparer = (a, b) => {
      assert.notEqual(a.path, b.path);
      return a.path < b.path ? -1 : 1;
    };
    while (input.length) {
      let i = 0;
      for (; i < input.length; i++)
        if (TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        output = output.concat(input.slice(0, i));
        input = input.slice(i);
      }
      i = 0;
      for (; i < input.length; i++)
        if (!TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        let tests = input.slice(0, i);
        tests.sort(comparer);
        output = output.concat(tests);
        input = input.slice(i);
      }
    }
    this.lines = output;
  }
}

class TestResult {
  constructor(testPath, result) {
    this.path = testPath;
    this.result = result;
  }

  get isUnexpected() {
    return this.result.is_unexpected;
  }

  get isRefTest() {
    let type = this.result['reftest_type'];
    return type && type[0] === '==';
  }

  get shouldRebaseline() {
    return options.shouldRebaseline(this);
  }

  get shouldUpdate() {
    return options.shouldUpdate(this.path);
  }

  get actuals() {
    return new TestResultTypes(this.result.actual);
  }

  get isFlagSpecificFailure() {
    let flagExpectations = this.result.flag_expectations;
    if (!flagExpectations)
      return false;  // not in FlagExpectations.
    let baseExpectations = this.result.base_expectations;
    if (!baseExpectations)
      return true;  // only in FlagExpectations.
    baseExpectations = new TestResultTypes(baseExpectations);
    assert(baseExpectations.length, this.path);
    return !baseExpectations.hasFailure;
  }

  get textMismatchCategory() {
    return this.result.text_mismatch;
  }

  *rebaselineDataFromActual(actuals) {
    assert(actuals instanceof TestResultTypes);
    let name = this.path.replace(/\.[a-z]+$/, '');
    for (let ext of actuals.failureExtensions()) {
      yield {
        source: name + '-actual' + ext,
        dest: name + '-expected' + ext,
      };
    }
  }

  rebaseline(results, testExpectations) {
    if (!this.shouldRebaseline)
      return false;
    if (this.isRefTest) {
      log.warn(`Cannot rebaseline a ref-test: ${this.path}`);
      return false;
    }
    let actuals = this.actuals;
    actuals.makeUnique();
    if (actuals.length !== 1) {
      log.warn(`  Ignore rebaseline due to flaky: ${this.path} ${actuals}`);
      return false;
    }
    let testPath = path.parse(this.path);
    let refPath = path.join(results.testRootDir, testPath.dir,
                            testPath.name + '-expected' + testPath.ext);
    if (fs.existsSync(refPath)) {
      log.warn(`  Ignore rebaseline of ref test: ${this.path}`);
      return false;
    }
    log(`  Rebaseline ${actuals} for ${this.path}`);
    let downloads = [];
    for (let download of this.rebaselineDataFromActual(actuals)) {
      let source = results.sourceDir + download.source;
      let dest = path.join(results.rebaselineDir, download.dest);
      downloads.push(options.download(source, dest)
          .then(() => log.files.push(dest)));
    }
    let task = Promise.all(downloads).then(() => {
      let expectations = testExpectations.testExpectations(this.path);
      if (!expectations)
        log.warn(`Expectation for ${this.path} not found in ${testExpectations.path}`);
      else for (let expectation of expectations)
        expectation.remove();
    });
    async_tasks.push(task);
    return true;
  }
}

class TestResults {
  constructor(results, sourcePath) {
    this.data = results;
    if (sourcePath) {
      this.sourcePath = sourcePath;
      this.sourceDir = path.dirname(sourcePath) + '/';
    }
  }

  static async load(file) {
    // If this is a build#, download from the layout-test-archive.
    let sourcePath = file;
    if (/^[0-9]+$/.test(file) && !fs.existsSync(file)) {
      let build = file;
      sourcePath = options.testResultsUrl(build);
      file = path.join(process.env.HOME, 'ng-bot', build + '.json');
      if (!fs.existsSync(file)) {
        await options.download(sourcePath, file);
      }
    }

    log(`Loading results from ${file}`);
    let content = fs.readFileSync(file, 'utf8');
    // Convert "ADD_RESULTS({...});" to a normal JSON.
    content = content.replace(/^[A-Z_]*\(/, '');
    content = content.replace(/\);$/, '');
    return new TestResults(JSON.parse(content), sourcePath);
  }

  static loadArgs(args) {
    let list = [];
    for (let arg of args) {
      if (!fs.existsSync(arg)) {
        if ('local'.startsWith(arg)) {
          list.push(TestResults.load(TestResults.defaultPath));
          continue;
        }
        if ('try-results'.startsWith(arg)) {
          TestResults.loadTryResults(list);
          continue;
        }
      }
      list.push(TestResults.load(arg));
    }
    return list;
  }

  static loadTryResults(list = []) {
    log('Running "git cl try-results"...');
    let results = child_process.execFileSync(
        'git', ['cl', 'try-results', '--json=-']);
    let builds = TestResults.parseTryResults(results);
    log(`try-results are: ${builds.join(' ')}`);
    for (let build of builds) {
      list.push(TestResults.load(build));
    }
    return list;
  }

  static parseTryResults(results, list = []) {
    results = JSON.parse(results);
    for (let result of results) {
      let build = result.url.match(/\/(\d+)$/);
      build = build ? build[1] : null;
      log(`Build #${build} ${result.status} ${result.result || ''}`);
      if (!build || result.status !== 'COMPLETED')
        continue;
      list.push(build);
    }
    list.sort((a, b) => parseInt(a) - parseInt(b));
    return list;
  }

  get message() {
    if (this.data.build_number)
      return this.data.build_number;
    return this.sourcePath;
  }

  get regressionCount() {
    return this.data.num_regressions;
  }

  baselineDirs(platforms, flags) {
    return map(options.baselineDirs(platforms, flags),
               dir => path.join(this.testRootDir, dir));
  }

  baseline(filePath, platforms, flags) {
    for (let dir of this.baselineDirs(platforms, flags)) {
      let p = path.join(dir, filePath);
      if (fs.existsSync(p))
        return p;
    }
    return null;
  }

  get flag() {
    // JSON has a leading '/', remove it.
    let flag = this.data.flag_name;
    return flag ? flag.trimLeft('/') : null;
  }

  get testRootDir() {
    if (this._testRootDir)
      return this._testRootDir;

    // Try the directory in results JSON.
    // It may not exist if the JSON is produced in other machines.
    this._testRootDir = this.data.layout_tests_dir;
    if (this._testRootDir && fs.existsSync(this._testRootDir)) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    this._testRootDir = options.testRootDir;
    if (this._testRootDir && fs.existsSync(this._testRootDir)) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    throw new Error('Test root directory not found');
  }

  get rebaselineDir() {
    let dir = this.testRootDir;
    dir = path.join(dir, 'flag-specific', 'enable-blink-features=LayoutNG');
    return dir;
  }

  toString() {
    if (this.data.builder_name)
      return `${this.data.build_number}@${this.data.builder_name}`;
    return `local (${this.sourcePath})`;
  }

  [Symbol.iterator]() {
    return this.resultsRecursive(this.data.tests, '');
  }

  *resultsRecursive(result, testPath) {
    if (result.actual) {
      yield new TestResult(testPath, result);
      return;
    }

    for (let name in result) {
      yield* this.resultsRecursive(result[name], testPath ? testPath + '/' + name : name);
    }
  }

  result(testPath) {
    let result = this.data.tests;
    for (let name of testPath.split(/\//)) {
      result = result[name];
      if (!result)
        return null;
    }
    if (!result.actual) {
      // Skip entry for a directory.
      log(`  Skipping ${testPath} because actual is missing`);
      return null;
    }
    return result;
  }

  rebaseline(expectations) {
    for (let result of this) {
      result.rebaseline(this, expectations);
    }
  }

  static get defaultPath() {
    return path.resolve(options.buildDir, 'layout-test-results', 'full_results.json');
  }
}

async function run(args) {
  await options.updateFromOptionsAsync();
  let expectations = new TestExpectations(options.testExpectationsPaths());
  log(`Checking test results for: ${Object.keys(options.expects).join(', ')}`);
  for (let key of Object.keys(options.expects))
    statistics[key] = 0;

  log(`Loading results: ${args.join(' ')}`);
  args = TestResults.loadArgs(args);
  let messages = [];
  for (let results of args) {
    try {
      results = await results;
    } catch (e) {
      if (e.statusCode === 404) {
        log.warn(`404 ${e.statusMessage} ignored: ${e}`);
        continue;
      }
      throw e;
    }
    if (options.shouldRebaseline) {
      results.rebaseline(expectations);
    } else if (options.deflake) {
      expectations.addActuals(results);
    } else {
      expectations.addActuals(filter(results, r => r.isUnexpected),
                              true);
    }
    messages.push(results.message);
  }

  let summary = ['Update summary:'];
  if (options.remove) {
    let missingTests = expectations.removeIfNotExists();
    summary.push(`  Removed due to missing tests: ${missingTests}`);
  }

  if (options.shouldRebaseline) {
  } else if (options.deflake) {
    expectations.deflake();
  } else {
    expectations.update();
  }

  if (async_tasks.length) {
    log('Waiting for all rebaseline tasks to copmlete');
    await Promise.all(async_tasks);
  }

  if (log.warnings.length) {
    log('WARNINGS:');
    for (let warning of log.warnings)
      log(warning);
  }
  let changeCount = 0;
  for (let key in statistics) {
    let value = statistics[key];
    changeCount += value;
    summary.push(`  ${key}: ${value}`);
  }
  log(summary.join('\n'));

  if (options.sort)
    expectations.sort();
  expectations.write();
  log.files.push(expectations.path);

  if (log.files.length) {
    log(`git: Adding ${log.files.length} files`);
    child_process.spawnSync('git', ['add'].concat(log.files), { stdio: 'inherit' });
    if (!options['no-commit']) {
      messages = messages.join(' ');
      log(`git: Committing ${messages}`);
      child_process.spawnSync('git', ['commit', '-m', messages], { stdio: 'inherit' });
    }
  }
}

if (require.main === module) {
  options = Options.parseArgs();
  run(options._).catch(err => {
    console.log(err);
    process.exit(1);
  });
} else {
  module.exports = run;
  module.exports.Options = Options;
  module.exports.parseArgs = Options.parseArgs;
  module.exports.setArgs = args =>
      options = Options.parseArgs(args);
  module.exports.StringList = StringList;
  module.exports.TestExpectation = TestExpectation;
  module.exports.TestExpectations = TestExpectations;
  module.exports.TestResult = TestResult;
  module.exports.TestResults = TestResults;
  module.exports.TestResultTypes = TestResultTypes;

  // Ensure options is available.
  options = Options.parseArgs([]);
}
