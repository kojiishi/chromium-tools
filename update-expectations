#!/usr/bin/env node
'use strict';
const assert = require('assert');
const fs = require('fs-extra');
const https = require('https');
const path = require('path');

let log = () => {};
const statistics = {
  LinesChanged: 0,
  LinesAdded: 0,
  LinesRemoved: 0,
};
let async_tasks = [];

function parseArgs(args) {
  const minimist = require('minimist');
  args = args || process.argv.slice(2);
  const options = minimist(args, {
    boolean: ['deflake', 'deflake-all', 'remove', 'sort', 'verbose'],
    string: ['bug', 'file', 'ignore', 'rebaseline', 'update', 'exclude'],
    alias: {
      b: 'bug',
      d: 'deflake',
      D: 'deflake-all',
      f: 'file',
      i: 'ignore',
      r: 'rebaseline',
      s: 'sort',
      u: 'update',
      v: 'verbose',
      x: 'exclude',
    },
    default: {
      update: 'Pass,Failure,Crash,Timeout',
    },
    unknown: arg => {
      if (arg.startsWith('-')) {
        throw new Error(`Unknown option ${arg}
Usage: ${path.basename(__filename)} [options] [results.json...]
  -b <bug>: The bug number/string for new entries.
  -d: De-flake if all results are pass.
  -D: De-flake if all results are consistent.
  -f <file>: The TestExpectations file path.
  -i <value,value,...>: Ignore specified values.
  -r <test paths>: Rebaseline specified tests instead of adding to expectations.
  --remove: Remove entries where test files are missing in the local file system.
  -s: Sort the output.
  -u <value,value,...>: Update specified values only.
  -v: Verbose.
  -x <string>: Do not udpate tests with the specified string in its path string.
`);
      }
      return true;
    },
  });
  if (options.verbose)
    log = console.log.bind(console);
  if (options.rebaseline && options.rebaseline !== '*') {
    let paths = options.rebaseline.split(/[ \n,]/);
    options.rebaseline = {};
    for (let path of paths)
      options.rebaseline[path] = true;
  }
  return options;
}
const options = parseArgs();
const args = options._;

function downloadUrl(url, dest) {
  log(`Downloading from ${url}`);
  return new Promise((resolve, reject) => {
    let created = null;
    https.get(url, response => {
      log(`HTTP Status=${response.statusCode} for ${url}`);
      if (response.statusCode != 200) {
        reject(new Error(`HTTP status ${response.statusCode}`));
        return;
      }
      let dirname = path.dirname(dest);
      if (dirname)
        fs.ensureDirSync(dirname);
      let output = fs.createWriteStream(dest);
      created = dest;
      response.pipe(output);
      output.on('finish', () => {
        log(`Download completed to ${dest}.`);
        output.close(resolve);
      });
    }).on('error', err => {
      if (created)
        fs.unlink(created);
      reject(err);
    });
  });
}

class TestExpectation {
  constructor(bug, testPath, expectations, conditions, trailing) {
    this.bug = bug;
    this.path = testPath;
    this.expectations = expectations;
    this.conditions = conditions;
    this.trailing = trailing;
    this.isRemoved = false;
    this.confirmedExpectations = {};
    this.shouldNotUpdate = (options.exclude && testPath.includes(options.exclude)) ||
                           (this.expectations.length == 1 &&
                             (this.expectations[0] == 'Skip' ||
                              this.expectations[0] == 'NeedsRebaseline' ||
                              this.expectations[0] == 'NeedsManualRebaseline'));
    ;
  }

  static parse(line) {
    if (line.expectations)
      return line;
    let match = line.match(/^(\S*)\s+(\[([^\]]+)]\s+)?(\S+)\s+\[([^\]]+)](.*)/);
    if (match) {
      return new TestExpectation(match[1], match[4], match[5].trim().split(/\s+/), match[3], match[6]);
    }
    return null;
  }

  static isTestExpectation(obj) {
    return obj instanceof TestExpectation;
  }

  get filePath() {
    return this.path.replace(/^virtual\/[^/]*\//, '');
  }

  get shouldRebaseline() {
    if (!options.rebaseline)
      return false;
    return this.path in options.rebaseline;
  }

  toString() {
    if (this.isRemoved)
      return null;
    let output = [ this.bug ? this.bug : '' ];
    if (this.conditions)
      output = output.concat('[', this.conditions.trim(), ']');
    output = output.concat(this.path, '[', this.expectations, ']');
    return output.join(' ') + (this.trailing ? this.trailing : '');
  }

  remove() {
    assert(!this.isRemoved);
    this.isRemoved = true;
    statistics.LinesRemoved++;
  }

  updateExpectations(result) {
    //log(`${this.path}: ${result.actual}`);
    if (this.shouldNotUpdate)
      return 0;
    let addCount = this.updateFromActual(result.actual);
    if (addCount)
      statistics.LinesChanged++;
    return addCount;
  }

  updateFromActual(actuals) {
    let addCount = 0;
    actuals = actuals.split(/ +/);
    for (let actual of actuals) {
      switch (actual) {
        case 'PASS':
          addCount += this.addExpect('Pass');
          break;
        case 'IMAGE':
        case 'TEXT':
        case 'IMAGE+TEXT':
          addCount += this.addExpect('Failure');
          break;
        case 'CRASH':
          addCount += this.addExpect('Crash');
          break;
        case 'TIMEOUT':
          addCount += this.addExpect('Timeout');
          break;
        case 'MISSING':
          addCount += this.addExpect('Skip');
          break;
        case 'SKIP':
          break;
        default:
          throw new Error(`Unknown actual ${actual}`);
      }
    }
    if (addCount)
      this.expectations.sort();
    return addCount;
  }

  rebaseline(result, sourceDir, rebaselineDir) {
    let actuals = result.actual.split(/ +/);
    if (actuals.length !== 1) {
      log(`  Cannot rebaseline due to flaky: ${this.path}`);
      return false;
    }
    let name = this.path.replace(/\.[a-z]+$/, '');
    log(`  Rebaseline ${actuals[0]} for ${this.path}`);
    let downloads = [];
    for (let type of actuals[0].split('+')) {
      let ext = null;
      switch (type) {
        case 'IMAGE':
          ext = '.png';
          break;
        case 'TEXT':
          ext = '.txt';
          break;
        default:
          log(`  Cannot rebaseline '${actuals.join(' ')}: ${this.path}`);
          return false;
      }
      let source = sourceDir + name + '-actual' + ext;
      let dest = path.join(rebaselineDir, name + '-expected' + ext);
      downloads.push(downloadUrl(source, dest));
    }
    async_tasks.push(Promise.all(downloads)
      .then(() => this.remove()));
    return true;
  }

  addExpect(expect) {
    if (!expect)
      return 0;
    this.confirmedExpectations[expect] = true;
    if (!(expect in statistics) || this.expectations.includes(expect))
      return 0;
    log(`  Adding ${expect} to ${this.path}`);
    this.expectations.push(expect);
    statistics[expect]++;
    return 1;
  }

  deflake(deflakeAll) {
    if (this.shouldNotUpdate)
      return false;
    let confirmCount = Object.keys(this.confirmedExpectations).length;
    if (!confirmCount)
      return false;
    if (this.confirmedExpectations['Pass'] && confirmCount == 1) {
      // Don't remove '[ Pass ]', it's to override expectations in different file.
      if (!(this.expectations.length == 1 && this.expectations[0] == 'Pass')) {
        log(`  Removing all passes: ${this.path}`);
        this.remove();
      }
      return true;
    }

    if (!deflakeAll)
      return;
    let deflaked = this.expectations.filter(e => e in this.confirmedExpectations);
    if (deflaked.length == this.expectations.length)
      return false;
    log(`  Deflaking from ${this.expectations} to ${deflaked}: ${this.path}`);
    this.expectations = deflaked;
    statistics.LinesDeflaked = statistics.LinesDeflaked || 0;
    statistics.LinesDeflaked++;
    return true;
  }

  exists(testRoot) {
    return fs.existsSync(path.resolve(testRoot, this.filePath));
  }
}

class TestExpectations {
  constructor(file) {
    this.path = file;
    log(`Reading expectations file from ${file}`);
    let inputText = fs.readFileSync(file, 'utf8');
    this.parse(inputText);
  }

  parse(inputText) {
    let lines = inputText.trimRight().split(/\r?\n/)
    let tests = [];
    this.testByPath = {};
    for (let line of lines) {
      let test = TestExpectation.parse(line);
      if (!test) {
        tests.push(line);
      } else {
        tests.push(test);
        this.testByPath[test.path] = test;
      }
    }
    this.lines = tests;
  }

  add(testPath) {
    let test = new TestExpectation(options.bug, testPath, []);
    if (test.shouldNotUpdate)
      return null;
    this.lines.push(test);
    this.testByPath[testPath] = test;
    statistics.LinesAdded++;
    return test;
  }

  write() {
    let lines = this.lines
      .filter(test =>
        !TestExpectation.isTestExpectation(test) ||
        !test.isRemoved);
    fs.writeFileSync(this.path, lines.join('\n') + '\n', 'utf8');
  }

  expectation(testPath) {
    assert(testPath);
    return this.testByPath[testPath];
  }

  deflake(deflakeAll) {
    log(`De-flaking ${deflakeAll ? 'all results' : 'passes'}`);
    for (let test of this.lines) {
      if (!TestExpectation.isTestExpectation(test))
        continue;
      test.deflake(deflakeAll);
    }
  }

  removeIfNotExists(testRootDir) {
    if (!testRootDir)
      testRootDir = TestExpectations.findTestRootDir(this.path);
    log(`Checking non-existent tests in ${testRootDir}`);
    return this.removeIf(test => {
      if (test.path && !test.exists(testRootDir)) {
        log(`  Removing non-existent test: ${test.path}`);
        statistics.LinesRemoved++;
        return true;
      }
      return false;
    });
  }

  sort() {
    let input = this.lines;
    let output = [];
    let comparer = (a, b) => {
      assert.notEqual(a.path, b.path);
      return a.path < b.path ? -1 : 1;
    };
    while (input.length) {
      let i = 0;
      for (; i < input.length; i++)
        if (TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        output = output.concat(input.slice(0, i));
        input = input.slice(i);
      }
      i = 0;
      for (; i < input.length; i++)
        if (!TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        let tests = input.slice(0, i);
        tests.sort(comparer);
        output = output.concat(tests);
        input = input.slice(i);
      }
    }
    this.lines = output;
  }

  static findTestRootDir(dir) {
    // Traverse ancestor directories to find the test root.
    for (dir = dir || '.';;) {
      if (fs.existsSync(path.resolve(dir, 'TestExpectations')))
        return dir;
      let parent = path.resolve(dir, '..');
      if (parent == dir)
        return null;
      dir = parent;
    }
  }
}

class TestResults {
  constructor(results, sourcePath) {
    this.results = results;
    this.sourcePath = sourcePath;
    this.sourceDir = path.dirname(sourcePath) + '/';
  }

  static async load(file = TestResults.defaultPath) {
    // If this is a build#, download from the layout-test-archive.
    let sourcePath = file;
    if (/^[0-9]+$/.test(file) && !fs.existsSync(file)) {
      let build = file;
      sourcePath = `https://storage.googleapis.com/chromium-layout-test-archives/linux_layout_tests_layout_ng/${build}/layout-test-results/full_results.json`;
      file = path.join(process.env.HOME, 'ng-bot', build + '.json');
      if (!fs.existsSync(file)) {
        await downloadUrl(sourcePath, file);
      }
    }

    log(`Loading results from ${file}`);
    let content = fs.readFileSync(file, 'utf8');
    // Convert "ADD_RESULTS({...});" to a normal JSON.
    content = content.replace(/^[A-Z_]*\(/, '');
    content = content.replace(/\);$/, '');
    return new TestResults(JSON.parse(content), sourcePath);
  }

  get regressionCount() {
    return this.results.num_regressions;
  }

  get testRootDir() {
    if (this._testRootDir)
      return this._testRootDir;

    // Try the directory in results JSON.
    // It may not exist if the JSON is produced in other machines.
    this._testRootDir = this.results.layout_tests_dir;
    if (fs.existsSync(this._testRootDir)) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    this._testRootDir = TestExpectations.findTestRootDir();
    if (this._testRootDir) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    throw new Error('Test root directory not found');
  }

  get rebaselineDir() {
    let dir = this.testRootDir;
    dir = path.join(dir, 'flag-specific', 'enable-blink-features=LayoutNG');
    return dir;
  }

  toString() {
    if (this.results.builder_name)
      return `${this.results.build_number}@${this.results.builder_name}`;
    return `local (${this.sourcePath})`;
  }

  result(testPath) {
    let result = this.results.tests;
    for (let name of testPath.split(/\//)) {
      result = result[name];
      if (!result)
        return null;
    }
    if (!result.actual) {
      // Skip entry for a directory.
      log(`  Skipping ${testPath} because actual is missing`);
      return null;
    }
    return result;
  }

  updateExpectations(expectations) {
    log(`Updating expectations from ${this.toString()}`);
    this.updateExpectationsRecursively(expectations, this.results.tests, '');
  }

  updateExpectationsRecursively(expectations, result, testPath) {
    // If this is a directory, traverse children.
    if (!result.actual) {
      for (let name in result) {
        this.updateExpectationsRecursively(expectations, result[name], testPath ? testPath + '/' + name : name);
      }
      return;
    }

    // If this is a test result, update expectations.
    assert(testPath);
    if (!result.is_unexpected)
      return;
    let test = expectations.expectation(testPath);
    if (!test) {
      test = expectations.add(testPath);
      if (!test)
        return;
    }
    if (test.shouldRebaseline) {
      test.rebaseline(result, this.sourceDir, this.rebaselineDir);
      return;
    }
    test.updateExpectations(result);
  }

  static get defaultPath() {
    const outDir = process.env.CHROMIUM_OUTPUT_DIR;
    return path.resolve(outDir, 'layout-test-results', 'full_results.json');
  }
}

async function run() {
  if (options.bug && options.bug.match(/^\d/))
    options.bug = 'crbug.com/' + options.bug;
  let expectations = options.file ? new TestExpectations(options.file) : null;
  if (options.update) {
    for (let value of options.update.split(/,/))
      statistics[value] = 0;
  }
  if (options.ignore) {
    for (let value of options.ignore.split(/,/))
      delete statistics[value];
  }
  log(`Checking test results for: ${Object.keys(statistics).filter(k => !k.startsWith('Line')).join(', ')}`);
  if (!args.length)
    args.push(null);

  let results_list = args.map(arg => TestResults.load(arg));
  for (let results of results_list) {
    results = await results;
    if (!expectations)
      expectations = new TestExpectations(path.resolve(results.testRootDir, 'TestExpectations'));
    results.updateExpectations(expectations);
  }

  let summary = ['Update summary:'];
  if (options.remove) {
    let missingTests = expectations.removeIfNotExists();
    summary.push(`  Removed due to missing tests: ${missingTests}`);
  }
  if (options.deflake || options['deflake-all']) {
    expectations.deflake(options['deflake-all']);
  }

  if (async_tasks) {
    log('Waiting for all rebaseline tasks to copmlete');
    await Promise.all(async_tasks);
  }

  let changeCount = 0;
  for (let key in statistics) {
    let value = statistics[key];
    changeCount += value;
    summary.push(`  ${key}: ${value}`);
  }
  log(summary.join('\n'));

  if (options.sort)
    expectations.sort();
  expectations.write();
}

if (require.main === module) {
  run().catch(err => {
    console.log(err);
    process.exit(1);
  });
} else {
  module.exports = run;
  module.exports.TestResults = TestResults;
  module.exports.TestExpectations = TestExpectations;
}
