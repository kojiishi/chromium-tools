#!/usr/bin/env node
'use strict';
const assert = require('assert');
const fs = require('fs');
const path = require('path');

const minimist = require('minimist');
const options = minimist(process.argv.slice(2), {
  boolean: ['deflake', 'deflake-all', 'remove', 'sort', 'verbose'],
  string: ['bug', 'file', 'ignore', 'update'],
  alias: {
    b: 'bug',
    d: 'deflake',
    D: 'deflake-all',
    f: 'file',
    i: 'ignore',
    r: 'remove',
    s: 'sort',
    u: 'update',
    v: 'verbose',
  },
  default: {
    update: 'Pass,Failure,Crash,Timeout',
  },
  unknown: arg => {
    if (arg.startsWith('-')) {
      throw new Error(`Unknown option ${arg}
Usage: ${path.basename(__filename)} [options] [results.json...]
  -b <bug>: The bug number/string for new entries.
  -d: De-flake if all results are pass.
  -D: De-flake if all results are consistent.
  -f <file>: The TestExpectations file path.
  -i <value,value,...>: Ignore specified values.
  -r: Remove entries where test files are missing in the local file system.
  -s: Sort the output. Effective only when there are changes.
  -u <value,value,...>: Update specified values only.
  -v: Verbose.
`);
    }
    return true;
  },
});
const args = options._;
const statistics = { LinesChanged: 0, LinesAdded: 0 };

class TestExpectation {
  constructor(bug, testPath, expectations, conditions) {
    this.bug = bug;
    this.path = testPath;
    this.expectations = expectations;
    this.conditions = conditions;
    this.confirmedExpectations = {};
  }

  static parse(line) {
    if (line.expectations)
      return line;
    let match = line.match(/^(\S*)\s+(\[([^\]]+)]\s+)?(\S+)\s+\[([^\]]+)]/);
    if (match) {
      return new TestExpectation(match[1], match[4], match[5].trim().split(/\s+/), match[3]);
    }
    return null;
  }

  static isTestExpectation(obj) {
    return obj instanceof TestExpectation;
  }

  get filePath() {
    return this.path.replace(/^virtual\/[^/]*\//, '');
  }

  toString() {
    let output = [ this.bug ? this.bug : '' ];
    if (this.conditions)
      output = output.concat('[', this.conditions.trim(), ']');
    output = output.concat(this.path, '[', this.expectations, ']');
    return output.join(' ');
  }

  updateExpectations(result) {
    if (this.expectations.length == 1 &&
        (this.expectations[0] == 'Skip' ||
         this.expectations[0] == 'NeedsRebaseline' ||
         this.expectations[0] == 'NeedsManualRebaseline')) {
      return false;
    }
    //log(`${this.path}: ${result.actual}`);
    result.is_unexpected = false;
    let addCount = this.updateFromActual(result.actual);
    if (addCount)
      statistics.LinesChanged++;
    return addCount;
  }

  updateFromActual(actuals) {
    let addCount = 0;
    actuals = actuals.split(/ +/);
    for (let actual of actuals) {
      switch (actual) {
        case 'PASS':
          addCount += this.addExpect('Pass');
          break;
        case 'IMAGE':
        case 'TEXT':
        case 'IMAGE+TEXT':
          addCount += this.addExpect('Failure');
          break;
        case 'CRASH':
          addCount += this.addExpect('Crash');
          break;
        case 'TIMEOUT':
          addCount += this.addExpect('Timeout');
          break;
        case 'SKIP':
        case 'MISSING':
          break;
        default:
          throw new Error(`Unknown actual ${actual}`);
      }
    }
    if (addCount)
      this.expectations.sort();
    return addCount;
  }

  addExpect(expect) {
    if (!expect)
      return 0;
    this.confirmedExpectations[expect] = true;
    if (!(expect in statistics) || this.expectations.includes(expect))
      return 0;
    log(`  Adding ${expect} to ${this.path}`);
    this.expectations.push(expect);
    statistics[expect]++;
    return 1;
  }

  deflakeShouldRemove() {
    function isPassOnly(expectations) {
      return expectations['Pass'] && Object.keys(expectations).length == 1;
    }
    // Don't remove '[ Pass ]', it's to override expectations in different file.
    if (isPassOnly(this.expectations))
      return false;
    return isPassOnly(this.confirmedExpectations);
  }

  deflake() {
    if (!Object.keys(this.confirmedExpectations).length)
      return false;
    let deflaked = this.expectations.filter(e => e in this.confirmedExpectations);
    if (deflaked.length == this.expectations.length)
      return false;
    this.expectations = deflaked;
    return true;
  }

  exists(testRoot) {
    return fs.existsSync(path.resolve(testRoot, this.filePath));
  }
}

class TestExpectations {
  constructor(file) {
    this.path = file;
    log(`Reading expectations file from ${file}`);
    let inputText = fs.readFileSync(file, 'utf8');
    this.lines = inputText.trimRight().split(/\r?\n/);
  }

  write() {
    fs.writeFileSync(this.path, this.lines.join('\n') + '\n', 'utf8');
  }

  removeIfNotExists(testRootDir) {
    if (!testRootDir)
      testRootDir = TestExpectations.findTestRootDir(this.path);
    log(`Checking non-existent tests in ${testRootDir}`);
    statistics.LinesRemoved = statistics.LinesRemoved || 0;
    return this.removeIf(test => {
      if (test.path && !test.exists(testRootDir)) {
        log(`  Removing non-existent test: ${test.path}`);
        statistics.LinesRemoved++;
        return true;
      }
      return false;
    });
  }

  deflake(deflakeAll) {
    log(`De-flaking ${deflakeAll ? 'all results' : 'passes'}`);
    statistics.LinesRemoved = statistics.LinesRemoved || 0;
    statistics.LinesDeflaked = statistics.LinesDeflaked || 0;
    this.forAll(test => {
      if (test.deflakeShouldRemove()) {
        log(`  Removing all passes: ${test.path}`);
        statistics.LinesRemoved++;
        return null;
      }
      if (!deflakeAll)
        return test;
      let beforeDeflake = test.expectations;
      if (test.deflake()) {
        log(`  Deflaking from ${beforeDeflake} to ${test.expectations}: ${test.path}`);
        statistics.LinesDeflaked++;
      }
      return test;
    });
  }

  removeIf(condition) {
    let count = 0;
    this.forAll(test => {
      if (condition(test)) {
        count++;
        return null;
      }
      return test;
    });
    return count;
  }

  forAll(filter) {
    let output = [];
    for (let line of this.lines) {
      let test = TestExpectation.parse(line);
      if (test) {
        test = filter(test);
        if (!test)
          continue;
        line = test;
      }
      output.push(line);
    }
    this.lines = output;
  }

  sort() {
    let input = this.lines;
    let output = [];
    let comparer = (a, b) => {
      assert.notEqual(a.path, b.path);
      return a.path < b.path ? -1 : 1;
    };
    while (input.length) {
      let i = 0;
      for (; i < input.length; i++)
        if (TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        output = output.concat(input.slice(0, i));
        input = input.slice(i);
      }
      i = 0;
      for (; i < input.length; i++)
        if (!TestExpectation.isTestExpectation(input[i]))
          break;
      if (i) {
        let tests = input.slice(0, i);
        tests.sort(comparer);
        output = output.concat(tests);
        input = input.slice(i);
      }
    }
    this.lines = output;
  }

  static findTestRootDir(dir) {
    // Traverse ancestor directories to find the test root.
    for (dir = dir || '.';;) {
      if (fs.existsSync(path.resolve(dir, 'TestExpectations')))
        return dir;
      let parent = path.resolve(dir, '..');
      if (parent == dir)
        return null;
      dir = parent;
    }
  }
}

class TestResults {
  constructor(file) {
    if (!file) {
      file = TestResults.defaultPath;
    }
    log(`Loading results from ${file}`);
    let content = fs.readFileSync(file, 'utf8');
    // Convert "ADD_RESULTS({...});" to a normal JSON.
    content = content.replace(/^[A-Z_]*\(/, '');
    content = content.replace(/\);$/, '');
    this.results = JSON.parse(content);
  }

  get testRootDir() {
    if (this._testRootDir)
      return this._testRootDir;

    // Try the directory in results JSON.
    // It may not exist if the JSON is produced in other machines.
    this._testRootDir = this.results.layout_tests_dir;
    if (fs.existsSync(this._testRootDir)) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    this._testRootDir = TestExpectations.findTestRootDir();
    if (this._testRootDir) {
      log(`Test root directory: ${this._testRootDir}`);
      return this._testRootDir;
    }

    throw new Error('Test root directory not found');
  }

  result(testPath) {
    let result = this.results.tests;
    //for (let key in result)
    //  log(key);
    for (let name of testPath.split(/\//)) {
      result = result[name];
      if (!result) {
        //log(`${name} not found from ${testPath}`);
        return null;
      }
      //log(`${name} found from ${testPath}`);
    }
    if (!result.actual) {
      // Skip entry for a directory.
      log(`  Skipping ${testPath} because actual is missing`);
      return null;
    }
    //log(`${testPath}: ${result.actual}`);
    return result;
  }

  updateExpectations(expectations) {
    let changeCount = 0;
    expectations.forAll(test => {
      let result = this.result(test.path);
      if (result) {
        if (test.updateExpectations(result))
          changeCount++;
      }
      return test;
    });

    log(`Checking new failures:`);
    let addCount = this.addMissingExpectations(expectations.lines, this.results.tests);
    log(`${changeCount} lines changed, ${addCount} lines added to ${expectations.path}.`);
    return changeCount + addCount;
  }

  addMissingExpectations(output, result, testPath) {
    //log(`addMissingExpectations(${result}, ${testPath})`);
    if (!('actual' in result)) {
      // If this is a directory, check children.
      let addCount = 0;
      for (let dir in result) {
        addCount += this.addMissingExpectations(output, result[dir], testPath ? testPath + '/' + dir : dir);
      }
      return addCount;
    }
    if (!result.is_unexpected)
      return 0;
    let actual = result.actual;
    if (actual == 'PASS')
      return 0;
    let test = new TestExpectation(options.bug, testPath, []);
    if (!test.updateFromActual(actual))
      return 0;
    output.push(test);
    statistics.LinesAdded++;
    return 1;
  }

  static get defaultPath() {
    const outDir = process.env.CHROMIUM_OUTPUT_DIR;
    return path.resolve(outDir, 'layout-test-results', 'full_results.json');
  }
}

let log = options.verbose ? console.log.bind(console) : () => {};
if (options.bug && options.bug.match(/^\d/))
  options.bug = 'crbug.com/' + options.bug;
let expectations = options.file ? new TestExpectations(options.file) : null;
if (options.update) {
  for (let value of options.update.split(/,/))
    statistics[value] = 0;
}
if (options.ignore) {
  for (let value of options.ignore.split(/,/))
    delete statistics[value];
}
log(`Checking test results for: ${Object.keys(statistics).filter(k => !k.startsWith('Line')).join(', ')}`);
if (!args.length)
  args.push(null);

for (let arg of args) {
  const results = new TestResults(arg);
  if (!expectations)
    expectations = new TestExpectations(path.resolve(results.testRootDir, 'TestExpectations'));
  results.updateExpectations(expectations);
}

let summary = ['Update summary:'];
if (options.remove) {
  let missingTests = expectations.removeIfNotExists();
  summary.push(`  Removed due to missing tests: ${missingTests}`);
}
if (options.deflake || options['deflake-all']) {
  expectations.deflake(options['deflake-all']);
}

let changeCount = 0;
for (let key in statistics) {
  let value = statistics[key];
  changeCount += value;
  summary.push(`  ${key}: ${value}`);
}
log(summary.join('\n'));
if (changeCount) {
  if (options.sort)
    expectations.sort();
  expectations.write();
}
